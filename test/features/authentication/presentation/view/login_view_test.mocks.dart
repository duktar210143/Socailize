// Mocks generated by Mockito 5.4.4 from annotations
// in discussion_forum/test/features/authentication/presentation/view/login_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:io' as _i11;

import 'package:dartz/dartz.dart' as _i4;
import 'package:discussion_forum/core/failure/failure.dart' as _i7;
import 'package:discussion_forum/core/shared_pref/user_shared_prefs.dart'
    as _i3;
import 'package:discussion_forum/features/authentication/data/data_source/auth_remote_data_source.dart'
    as _i8;
import 'package:discussion_forum/features/authentication/domain/entity/user_entity.dart'
    as _i10;
import 'package:discussion_forum/features/authentication/domain/repository/auth_repository.dart'
    as _i2;
import 'package:discussion_forum/features/authentication/domain/use_case/auth_usecase.dart'
    as _i9;
import 'package:discussion_forum/features/authentication/domain/use_case/login_usecase.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIAuthRepository_0 extends _i1.SmartFake
    implements _i2.IAuthRepository {
  _FakeIAuthRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserSharedPrefs_1 extends _i1.SmartFake
    implements _i3.UserSharedPrefs {
  _FakeUserSharedPrefs_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i5.LoginUseCase {
  @override
  _i2.IAuthRepository get authRepository => (super.noSuchMethod(
        Invocation.getter(#authRepository),
        returnValue: _FakeIAuthRepository_0(
          this,
          Invocation.getter(#authRepository),
        ),
        returnValueForMissingStub: _FakeIAuthRepository_0(
          this,
          Invocation.getter(#authRepository),
        ),
      ) as _i2.IAuthRepository);

  @override
  _i3.UserSharedPrefs get userSharedPrefs => (super.noSuchMethod(
        Invocation.getter(#userSharedPrefs),
        returnValue: _FakeUserSharedPrefs_1(
          this,
          Invocation.getter(#userSharedPrefs),
        ),
        returnValueForMissingStub: _FakeUserSharedPrefs_1(
          this,
          Invocation.getter(#userSharedPrefs),
        ),
      ) as _i3.UserSharedPrefs);

  @override
  _i6.Future<_i4.Either<_i7.Failure, _i8.AuthData>> login(
    String? userName,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            userName,
            password,
          ],
        ),
        returnValue: _i6.Future<_i4.Either<_i7.Failure, _i8.AuthData>>.value(
            _FakeEither_2<_i7.Failure, _i8.AuthData>(
          this,
          Invocation.method(
            #login,
            [
              userName,
              password,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.Either<_i7.Failure, _i8.AuthData>>.value(
                _FakeEither_2<_i7.Failure, _i8.AuthData>(
          this,
          Invocation.method(
            #login,
            [
              userName,
              password,
            ],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, _i8.AuthData>>);

  @override
  _i6.Future<bool> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
        returnValueForMissingStub: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i6.Future<_i4.Either<_i7.Failure, bool>> forgotPassword(String? email) =>
      (super.noSuchMethod(
        Invocation.method(
          #forgotPassword,
          [email],
        ),
        returnValue: _i6.Future<_i4.Either<_i7.Failure, bool>>.value(
            _FakeEither_2<_i7.Failure, bool>(
          this,
          Invocation.method(
            #forgotPassword,
            [email],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.Either<_i7.Failure, bool>>.value(
                _FakeEither_2<_i7.Failure, bool>(
          this,
          Invocation.method(
            #forgotPassword,
            [email],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, bool>>);
}

/// A class which mocks [AuthUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthUseCase extends _i1.Mock implements _i9.AuthUseCase {
  @override
  _i2.IAuthRepository get authRepository => (super.noSuchMethod(
        Invocation.getter(#authRepository),
        returnValue: _FakeIAuthRepository_0(
          this,
          Invocation.getter(#authRepository),
        ),
        returnValueForMissingStub: _FakeIAuthRepository_0(
          this,
          Invocation.getter(#authRepository),
        ),
      ) as _i2.IAuthRepository);

  @override
  _i3.UserSharedPrefs get userSharedPrefs => (super.noSuchMethod(
        Invocation.getter(#userSharedPrefs),
        returnValue: _FakeUserSharedPrefs_1(
          this,
          Invocation.getter(#userSharedPrefs),
        ),
        returnValueForMissingStub: _FakeUserSharedPrefs_1(
          this,
          Invocation.getter(#userSharedPrefs),
        ),
      ) as _i3.UserSharedPrefs);

  @override
  _i6.Future<_i4.Either<_i7.Failure, bool>> signUpUser(_i10.AuthEntity? user) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUpUser,
          [user],
        ),
        returnValue: _i6.Future<_i4.Either<_i7.Failure, bool>>.value(
            _FakeEither_2<_i7.Failure, bool>(
          this,
          Invocation.method(
            #signUpUser,
            [user],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.Either<_i7.Failure, bool>>.value(
                _FakeEither_2<_i7.Failure, bool>(
          this,
          Invocation.method(
            #signUpUser,
            [user],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, bool>>);

  @override
  _i6.Future<_i4.Either<_i7.Failure, _i10.AuthEntity>> uploadProfile(
          _i11.File? image) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadProfile,
          [image],
        ),
        returnValue: _i6.Future<_i4.Either<_i7.Failure, _i10.AuthEntity>>.value(
            _FakeEither_2<_i7.Failure, _i10.AuthEntity>(
          this,
          Invocation.method(
            #uploadProfile,
            [image],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.Either<_i7.Failure, _i10.AuthEntity>>.value(
                _FakeEither_2<_i7.Failure, _i10.AuthEntity>(
          this,
          Invocation.method(
            #uploadProfile,
            [image],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, _i10.AuthEntity>>);

  @override
  _i6.Future<_i4.Either<bool, _i10.AuthEntity>> getUserData() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserData,
          [],
        ),
        returnValue: _i6.Future<_i4.Either<bool, _i10.AuthEntity>>.value(
            _FakeEither_2<bool, _i10.AuthEntity>(
          this,
          Invocation.method(
            #getUserData,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.Either<bool, _i10.AuthEntity>>.value(
                _FakeEither_2<bool, _i10.AuthEntity>(
          this,
          Invocation.method(
            #getUserData,
            [],
          ),
        )),
      ) as _i6.Future<_i4.Either<bool, _i10.AuthEntity>>);
}
