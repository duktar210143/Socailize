// Mocks generated by Mockito 5.4.4 from annotations
// in discussion_forum/test/unit_test/question_mock_unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:io' as _i9;

import 'package:dartz/dartz.dart' as _i3;
import 'package:discussion_forum/core/failure/failure.dart' as _i6;
import 'package:discussion_forum/features/question/domain/entity/question_entity.dart'
    as _i7;
import 'package:discussion_forum/features/question/domain/repository/question_repository.dart'
    as _i2;
import 'package:discussion_forum/features/question/domain/use_case/delete_question_use_case.dart'
    as _i10;
import 'package:discussion_forum/features/question/domain/use_case/get_all_questions_usecase.dart'
    as _i4;
import 'package:discussion_forum/features/question/domain/use_case/question_use_case.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIQuestionRepository_0 extends _i1.SmartFake
    implements _i2.IQuestionRepository {
  _FakeIQuestionRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetAllQuestionsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllQuestionsUseCase extends _i1.Mock
    implements _i4.GetAllQuestionsUseCase {
  @override
  _i2.IQuestionRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeIQuestionRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeIQuestionRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.IQuestionRepository);

  @override
  _i5.Future<
      _i3.Either<_i6.Failure,
          List<_i7.QuestionEntity>>> getAllQuestions() => (super.noSuchMethod(
        Invocation.method(
          #getAllQuestions,
          [],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.QuestionEntity>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.QuestionEntity>>(
          this,
          Invocation.method(
            #getAllQuestions,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.QuestionEntity>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.QuestionEntity>>(
          this,
          Invocation.method(
            #getAllQuestions,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.QuestionEntity>>>);
}

/// A class which mocks [AddQuestionUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddQuestionUseCase extends _i1.Mock
    implements _i8.AddQuestionUseCase {
  @override
  _i2.IQuestionRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeIQuestionRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeIQuestionRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.IQuestionRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> addQuestion(
    _i7.QuestionEntity? question,
    _i9.File? file,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addQuestion,
          [
            question,
            file,
          ],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #addQuestion,
            [
              question,
              file,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
                _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #addQuestion,
            [
              question,
              file,
            ],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}

/// A class which mocks [DeletequestionUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeletequestionUsecase extends _i1.Mock
    implements _i10.DeletequestionUsecase {
  @override
  _i2.IQuestionRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeIQuestionRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeIQuestionRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.IQuestionRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> deleteQuestion(
          String? questionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteQuestion,
          [questionId],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #deleteQuestion,
            [questionId],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
                _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #deleteQuestion,
            [questionId],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}
